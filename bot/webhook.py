import asyncio
import logging
from datetime import datetime, timezone, timedelta

from aiogram.types import BufferedInputFile
from aiohttp import web

from bot.database.ORM.ORDER import export_order_to_excel_by_user, orm_process_payment
from bot.parametrs import session_maker, bot


async def t_bank_webhook(request: web.Request):
    data = await request.json()

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞
    payment_id = data.get('RebillId')  # ID –ø–ª–∞—Ç–µ–∂–∞
    payment_status = data.get('Status')  # –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ Data
    metadata = data.get('Data', {})
    order_id = metadata.get('order_id')
    user_id=metadata.get('CUSTOMER_KEY')
    try:

        if payment_status == "CONFIRMED":
            async with session_maker() as session:
                try:
                    input_file = await orm_process_payment(session, int(order_id), int(user_id))

                    await bot.send_document(
                        chat_id=int(user_id),
                        document=input_file,
                        caption=f"üì¶ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!"
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

        return web.Response(status=200, text='OK')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞ –æ—Ç YooKassa: {e}")
        return web.Response(status=500)
